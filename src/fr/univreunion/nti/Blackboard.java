/*
 * Copyright 2022 Etienne Payet <etienne.payet at univ-reunion.fr>
 * 
 * This file is part of NTI.
 * 
 * NTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * NTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with NTI. If not, see <http://www.gnu.org/licenses/>.
 */

package fr.univreunion.nti;

/**
 * An object which is shared by all the non-termination
 * provers running concurrently. The provers can write 
 * data in this object in a thread safe way.
 * 
 * This class implements the singleton design pattern:
 * only one instance of it can be created.
 * 
 * @author <A HREF="mailto:etienne.payet@univ-reunion.fr">Etienne Payet</A>
 */

public class Blackboard {

	/**
	 * The unique instance of this class.
	 */
	private final static Blackboard UNIQUE_INSTANCE = new Blackboard();
	
	/**
	 * The number of unfolded rules generated by the 
	 * concurrent provers.
	 */
	private int generatedRules = 0;
	
	/**
	 * Returns the unique instance of this class.
	 * 
	 * @return the unique instance of this class
	 */
	public static synchronized Blackboard getInstance() {
		return UNIQUE_INSTANCE;
	}
	
	/**
	 * Builds a blackboard.
	 */
	private Blackboard() {}
	
	/**
	 * Adds the specified integer to the number of
	 * unfolded rules of this blackboard.
	 * 
	 * @param n an integer to add to the number of
	 * unfolded rules of this blackboard
	 */
	public synchronized void incGeneratedRules(int n) {
		this.generatedRules += n;
	}
	
	public synchronized int getGeneratedRules() {
		return this.generatedRules;
	}
}
